{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name_",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol_",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "ERC721ApprovalToCurrentOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC721IncorrectOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721InsufficientApproval",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "approver",
						"type": "address"
					}
				],
				"name": "ERC721InvalidApprover",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "ERC721InvalidOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC721InvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC721InvalidReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "ERC721InvalidSender",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721NonexistentToken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721TokenAlreadyMinted",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "tokenURI_",
						"type": "string"
					}
				],
				"name": "mintNFT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"ERC721IncorrectOwner(address,uint256,address)": [
					{
						"details": "表示代币所有权相关的错误（如转移时发送者不是所有者）。 通常在转移代币（transferFrom）时触发。",
						"params": {
							"owner": "代币的实际所有者地址",
							"sender": "发起转移的地址（非所有者）",
							"tokenId": "代币的唯一标识"
						}
					}
				],
				"ERC721InsufficientApproval(address,uint256)": [
					{
						"details": "表示操作员（operator）对代币的授权不足（未获得转移权限）。 通常在操作员尝试转移未授权的代币时触发。",
						"params": {
							"operator": "尝试操作代币的操作员地址",
							"tokenId": "代币的唯一标识（未授权给该操作员）"
						}
					}
				],
				"ERC721InvalidApprover(address)": [
					{
						"details": "表示授权者（approver）无效（如非代币所有者或未获得批量授权）。 通常在授权操作（approve）时触发。",
						"params": {
							"approver": "发起授权的地址（无授权权限）"
						}
					}
				],
				"ERC721InvalidOperator(address)": [
					{
						"details": "表示被授权的操作员（operator）无效（如为零地址）。 通常在批量授权（setApprovalForAll）时触发。",
						"params": {
							"operator": "被授权的操作员地址（无效地址，如 address(0)）"
						}
					}
				],
				"ERC721InvalidOwner(address)": [
					{
						"details": "表示某个地址不能作为所有者（例如，`address(0)` 是 ERC-721 中禁止的所有者地址）。 通常在查询余额（balanceOf）时触发。",
						"params": {
							"owner": "代币的当前所有者地址（此处为无效地址）"
						}
					}
				],
				"ERC721InvalidReceiver(address)": [
					{
						"details": "表示代币接收者（to）无效（如为零地址或不支持接收 NFT 的合约）。 通常在转移代币时触发。",
						"params": {
							"receiver": "接收代币的地址（无效地址）"
						}
					}
				],
				"ERC721InvalidSender(address)": [
					{
						"details": "表示代币发送者（from）无效（如为零地址）。 通常在转移代币时触发。",
						"params": {
							"sender": "发起转移的地址（无效地址，如 address(0)）"
						}
					}
				],
				"ERC721NonexistentToken(uint256)": [
					{
						"details": "表示 `tokenId` 对应的代币不存在（其所有者为零地址）。 通常在查询不存在的代币信息（如 ownerOf）时触发。",
						"params": {
							"tokenId": "代币的唯一标识（无效/未铸造的 ID）"
						}
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
				},
				"ApprovalForAll(address,address,bool)": {
					"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
				}
			},
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "授权 `to` 地址转移 `tokenId` 对应的代币（单次授权）。 当代币被转移后，该授权会自动清除。 同一时间只能有一个地址获得授权，授权零地址会清除之前的授权。  要求： - 调用者必须是代币所有者或已被授权的操作员。 - `tokenId` 必须存在。  触发 {Approval} 事件。",
					"params": {
						"to": "被授权的地址",
						"tokenId": "被授权转移的代币唯一标识"
					}
				},
				"balanceOf(address)": {
					"details": "返回 `owner` 地址拥有的代币数量。",
					"params": {
						"owner": "要查询的地址"
					},
					"returns": {
						"balance": "该地址持有的 NFT 总数"
					}
				},
				"getApproved(uint256)": {
					"details": "返回 `tokenId` 代币当前被授权的管理地址。  要求： - `tokenId` 必须存在。",
					"params": {
						"tokenId": "代币唯一标识"
					},
					"returns": {
						"operator": "被授权管理该代币的地址（零地址表示无授权）"
					}
				},
				"isApprovedForAll(address,address)": {
					"details": "查看 `operator` 是否被允许管理 `owner` 的所有资产。 参考 {setApprovalForAll} 函数的授权逻辑。",
					"params": {
						"operator": "操作员地址",
						"owner": "资产所有者地址"
					},
					"returns": {
						"_0": "是否拥有批量管理权限"
					}
				},
				"name()": {
					"details": "返回代币集合的名称（如“Bored Ape Yacht Club”）。",
					"returns": {
						"_0": "集合名称的字符串"
					}
				},
				"ownerOf(uint256)": {
					"details": "返回 `tokenId` 对应的代币所有者地址。  要求： - `tokenId` 必须是已存在的代币（未被销毁）。",
					"params": {
						"tokenId": "代币唯一标识"
					},
					"returns": {
						"_0": "owner 代币所有者地址"
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "将 `tokenId` 代币从 `from` 安全转移到 `to`（不带额外数据）。 与上一个函数功能一致，仅缺少 `data` 参数，适用于无需传递附加信息的场景。  要求： - 同 `safeTransferFrom`（带 data 参数的版本）。  触发 {Transfer} 事件。",
					"params": {
						"from": "转移发起地址",
						"to": "接收地址",
						"tokenId": "被转移的代币唯一标识"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "将 `tokenId` 代币从 `from` 安全转移到 `to`（带额外数据）。 \"安全\"指：若接收地址是合约，必须实现 `IERC721Receiver-onERC721Received` 函数，否则转移失败。  要求： - `from` 不能是零地址。 - `to` 不能是零地址。 - `tokenId` 必须存在且归 `from` 所有。 - 若调用者不是 `from`，则必须通过 {approve} 或 {setApprovalForAll} 获得转移授权。 - 若 `to` 是合约，必须实现 `IERC721Receiver-onERC721Received` 函数（用于确认接收）。  触发 {Transfer} 事件。",
					"params": {
						"data": "附加数据（会传递给接收合约的 `onERC721Received` 函数）",
						"from": "转移发起地址",
						"to": "接收地址",
						"tokenId": "被转移的代币唯一标识"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "授权或撤销 `operator` 作为调用者的操作员（批量授权）。 操作员可调用 {transferFrom} 或 {safeTransferFrom} 转移调用者拥有的所有代币。  要求： - `operator` 不能是零地址。  触发 {ApprovalForAll} 事件。",
					"params": {
						"approved": "授权状态（true 为授权，false 为撤销）",
						"operator": "操作员地址"
					}
				},
				"symbol()": {
					"details": "返回代币集合的符号（类似股票代码，如“BAYC”）。",
					"returns": {
						"_0": "集合符号的字符串"
					}
				},
				"tokenURI(uint256)": {
					"details": "返回 `tokenId` 对应代币的统一资源标识符（URI）。 该 URI 通常指向一个 JSON 文件，包含该 NFT 的详细元数据（如图片链接、描述、属性等）。 例如：\"ipfs://QmX...abc\" 或 \"https://example.com/nft/123.json\"。",
					"params": {
						"tokenId": "代币的唯一标识"
					},
					"returns": {
						"_0": "该代币元数据的 URI 字符串"
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "将 `tokenId` 代币从 `from` 转移到 `to`（非安全转移）。  警告：调用者需确保接收地址（尤其是合约）能处理 ERC-721 代币，否则代币可能永久锁定。 建议优先使用 {safeTransferFrom} 避免丢失风险，但需注意外部调用可能存在重入漏洞。  要求： - `from` 不能是零地址。 - `to` 不能是零地址。 - `tokenId` 必须归 `from` 所有。 - 若调用者不是 `from`，则必须通过 {approve} 或 {setApprovalForAll} 获得转移授权。  触发 {Transfer} 事件。",
					"params": {
						"from": "转移发起地址",
						"to": "接收地址",
						"tokenId": "被转移的代币唯一标识"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MyStandardERC721.sol": "MyStandardERC20"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc",
			"license": "MIT",
			"urls": [
				"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037",
				"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC721.sol": {
			"keccak256": "0xca34c490d41c332106d30b657f00dc028532cb6b9fef2b1729670ce476b36bce",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef5e7685d50ed8aae2104a7eb2c31ae5a3b508f24fadfa7611f92f819201aee9",
				"dweb:/ipfs/QmYbTD32FPrEfP1hkniQmRxVUWp8GTSqFV1Bhwx1HVirse"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC721Receiver.sol": {
			"keccak256": "0xfc922a810763205fd582dd5a6548ac5f41f8d0c8e8c1fbf48b01dc08d99f74af",
			"license": "MIT",
			"urls": [
				"bzz-raw://03b9b7719252b914d6011d919ddb176e99021cab45bee58f9a175f53bd2e952b",
				"dweb:/ipfs/QmTQLufNv8sFmnjbRqXueCQrLSrwzDvEHNXmwTyu3EVaWS"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f",
			"license": "MIT",
			"urls": [
				"bzz-raw://e28b872613b45e0e801d4995aa4380be2531147bfe2d85c1d6275f1de514fba3",
				"dweb:/ipfs/QmeeFcfShHYaS3BdgVj78nxR28ZaVUwbvr66ud8bT6kzw9"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x88cd5e3bee2e8c36b8d9058fbcaa81ad5704281b25634122234b55ea853d8055",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dc7e7ab5b8ea36c15027ab04221b05d1c970f47a53e9fd47ead8ca665d49c7e",
				"dweb:/ipfs/Qmeeph7fsDyfRr8vb2L8KcDEmKPb224TAayMvgqgGAnqpL"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0xf46268c37522320bb2119a5a394bc5c739a95c0c574c8d08e8c643f4d06e5c76",
			"license": "MIT",
			"urls": [
				"bzz-raw://517e4b295f35b9947c72ad7379a6089439ece7bb6f4a2ea0a159da13046c039e",
				"dweb:/ipfs/QmZXzkSfLUbvujig3zVbpDHykpHhqLpvQtdiN3B5j4TA3u"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e",
				"dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e",
			"license": "MIT",
			"urls": [
				"bzz-raw://81233d1f98060113d9922180bb0f14f8335856fe9f339134b09335e9f678c377",
				"dweb:/ipfs/QmWh6R35SarhAn4z2wH8SU456jJSYL2FgucfTFgbHJJN4E"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
				"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"contracts/MyStandardERC721.sol": {
			"keccak256": "0x87db296916f010a201cebdbe74ebb77643e532e163f788d0afb6bd011af70b53",
			"license": "MIT",
			"urls": [
				"bzz-raw://c18a33729874f91cc0fb1ae95fabad2a647f0e9f9238c702f9ec7d8c5938a123",
				"dweb:/ipfs/QmVSuHXw1eei3oceqhM2LEDeRcfEzywS5ggCk4MfSggc5g"
			]
		},
		"errors/IERC721Errors.sol": {
			"keccak256": "0x134cb5782b7df3dabc3ef339338730d74276e5b6204977b7a1e7d02747be0a75",
			"license": "MIT",
			"urls": [
				"bzz-raw://817d11e0fe9ed59296b58d77c8d3e3c84f748f6e95bfbc5e5f8cec6d5a76e458",
				"dweb:/ipfs/QmU3Ja45w1NSzVKwAUg1SJRN3iBCqgWD8BFiphfqrYCHqm"
			]
		}
	},
	"version": 1
}